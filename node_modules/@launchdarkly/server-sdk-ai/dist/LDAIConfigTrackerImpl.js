"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.LDAIConfigTrackerImpl = void 0;
const metrics_1 = require("./api/metrics");
const OpenAiUsage_1 = require("./api/metrics/OpenAiUsage");
class LDAIConfigTrackerImpl {
    constructor(_ldClient, _configKey, _variationKey, _version, _context) {
        this._ldClient = _ldClient;
        this._configKey = _configKey;
        this._variationKey = _variationKey;
        this._version = _version;
        this._context = _context;
        this._trackedMetrics = {};
    }
    _getTrackData() {
        return {
            variationKey: this._variationKey,
            configKey: this._configKey,
            version: this._version,
        };
    }
    trackDuration(duration) {
        this._trackedMetrics.durationMs = duration;
        this._ldClient.track('$ld:ai:duration:total', this._context, this._getTrackData(), duration);
    }
    async trackDurationOf(func) {
        const startTime = Date.now();
        try {
            // Be sure to await here so that we can track the duration of the function and also handle errors.
            const result = await func();
            return result;
        }
        finally {
            const endTime = Date.now();
            const duration = endTime - startTime; // duration in milliseconds
            this.trackDuration(duration);
        }
    }
    trackTimeToFirstToken(timeToFirstTokenMs) {
        this._trackedMetrics.timeToFirstTokenMs = timeToFirstTokenMs;
        this._ldClient.track('$ld:ai:tokens:ttf', this._context, this._getTrackData(), timeToFirstTokenMs);
    }
    trackFeedback(feedback) {
        this._trackedMetrics.feedback = feedback;
        if (feedback.kind === metrics_1.LDFeedbackKind.Positive) {
            this._ldClient.track('$ld:ai:feedback:user:positive', this._context, this._getTrackData(), 1);
        }
        else if (feedback.kind === metrics_1.LDFeedbackKind.Negative) {
            this._ldClient.track('$ld:ai:feedback:user:negative', this._context, this._getTrackData(), 1);
        }
    }
    trackSuccess() {
        this._trackedMetrics.success = true;
        this._ldClient.track('$ld:ai:generation', this._context, this._getTrackData(), 1);
        this._ldClient.track('$ld:ai:generation:success', this._context, this._getTrackData(), 1);
    }
    trackError() {
        this._trackedMetrics.success = false;
        this._ldClient.track('$ld:ai:generation', this._context, this._getTrackData(), 1);
        this._ldClient.track('$ld:ai:generation:error', this._context, this._getTrackData(), 1);
    }
    async trackOpenAIMetrics(func) {
        try {
            const result = await this.trackDurationOf(func);
            this.trackSuccess();
            if (result.usage) {
                this.trackTokens((0, OpenAiUsage_1.createOpenAiUsage)(result.usage));
            }
            return result;
        }
        catch (err) {
            this.trackError();
            throw err;
        }
    }
    trackBedrockConverseMetrics(res) {
        var _a, _b;
        if (((_a = res.$metadata) === null || _a === void 0 ? void 0 : _a.httpStatusCode) === 200) {
            this.trackSuccess();
        }
        else if (((_b = res.$metadata) === null || _b === void 0 ? void 0 : _b.httpStatusCode) && res.$metadata.httpStatusCode >= 400) {
            this.trackError();
        }
        if (res.metrics && res.metrics.latencyMs) {
            this.trackDuration(res.metrics.latencyMs);
        }
        if (res.usage) {
            this.trackTokens((0, metrics_1.createBedrockTokenUsage)(res.usage));
        }
        return res;
    }
    trackTokens(tokens) {
        this._trackedMetrics.tokens = tokens;
        const trackData = this._getTrackData();
        if (tokens.total > 0) {
            this._ldClient.track('$ld:ai:tokens:total', this._context, trackData, tokens.total);
        }
        if (tokens.input > 0) {
            this._ldClient.track('$ld:ai:tokens:input', this._context, trackData, tokens.input);
        }
        if (tokens.output > 0) {
            this._ldClient.track('$ld:ai:tokens:output', this._context, trackData, tokens.output);
        }
    }
    /**
     * Get a summary of the tracked metrics.
     */
    getSummary() {
        return Object.assign({}, this._trackedMetrics);
    }
}
exports.LDAIConfigTrackerImpl = LDAIConfigTrackerImpl;
//# sourceMappingURL=LDAIConfigTrackerImpl.js.map