"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.LDAIClientImpl = void 0;
const Mustache = require("mustache");
const LDAIConfigTrackerImpl_1 = require("./LDAIConfigTrackerImpl");
class LDAIClientImpl {
    constructor(_ldClient) {
        this._ldClient = _ldClient;
    }
    _interpolateTemplate(template, variables) {
        return Mustache.render(template, variables, undefined, { escape: (item) => item });
    }
    async config(key, context, defaultValue, variables) {
        var _a, _b, _c, _d, _e;
        const value = await this._ldClient.variation(key, context, defaultValue);
        const tracker = new LDAIConfigTrackerImpl_1.LDAIConfigTrackerImpl(this._ldClient, key, 
        // eslint-disable-next-line no-underscore-dangle
        (_b = (_a = value._ldMeta) === null || _a === void 0 ? void 0 : _a.variationKey) !== null && _b !== void 0 ? _b : '', 
        // eslint-disable-next-line no-underscore-dangle
        (_d = (_c = value._ldMeta) === null || _c === void 0 ? void 0 : _c.version) !== null && _d !== void 0 ? _d : 1, context);
        // eslint-disable-next-line no-underscore-dangle
        const enabled = !!((_e = value._ldMeta) === null || _e === void 0 ? void 0 : _e.enabled);
        const config = {
            tracker,
            enabled,
        };
        // We are going to modify the contents before returning them, so we make a copy.
        // This isn't a deep copy and the application developer should not modify the returned content.
        if (value.model) {
            config.model = Object.assign({}, value.model);
        }
        if (value.provider) {
            config.provider = Object.assign({}, value.provider);
        }
        const allVariables = Object.assign(Object.assign({}, variables), { ldctx: context });
        if (value.messages) {
            config.messages = value.messages.map((entry) => (Object.assign(Object.assign({}, entry), { content: this._interpolateTemplate(entry.content, allVariables) })));
        }
        return config;
    }
}
exports.LDAIClientImpl = LDAIClientImpl;
//# sourceMappingURL=LDAIClientImpl.js.map