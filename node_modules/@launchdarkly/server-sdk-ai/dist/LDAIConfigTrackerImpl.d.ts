import { LDContext } from '@launchdarkly/js-server-sdk-common';
import { LDAIConfigTracker } from './api/config';
import { LDAIMetricSummary } from './api/config/LDAIConfigTracker';
import { LDFeedbackKind, LDTokenUsage } from './api/metrics';
import { LDClientMin } from './LDClientMin';
export declare class LDAIConfigTrackerImpl implements LDAIConfigTracker {
    private _ldClient;
    private _configKey;
    private _variationKey;
    private _version;
    private _context;
    private _trackedMetrics;
    constructor(_ldClient: LDClientMin, _configKey: string, _variationKey: string, _version: number, _context: LDContext);
    private _getTrackData;
    trackDuration(duration: number): void;
    trackDurationOf<TRes>(func: () => Promise<TRes>): Promise<TRes>;
    trackTimeToFirstToken(timeToFirstTokenMs: number): void;
    trackFeedback(feedback: {
        kind: LDFeedbackKind;
    }): void;
    trackSuccess(): void;
    trackError(): void;
    trackOpenAIMetrics<TRes extends {
        usage?: {
            total_tokens?: number;
            prompt_tokens?: number;
            completion_tokens?: number;
        };
    }>(func: () => Promise<TRes>): Promise<TRes>;
    trackBedrockConverseMetrics<TRes extends {
        $metadata: {
            httpStatusCode?: number;
        };
        metrics?: {
            latencyMs?: number;
        };
        usage?: {
            inputTokens?: number;
            outputTokens?: number;
            totalTokens?: number;
        };
    }>(res: TRes): TRes;
    trackTokens(tokens: LDTokenUsage): void;
    /**
     * Get a summary of the tracked metrics.
     */
    getSummary(): LDAIMetricSummary;
}
//# sourceMappingURL=LDAIConfigTrackerImpl.d.ts.map